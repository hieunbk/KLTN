# Generated by Django 4.0.4 on 2022-05-31 15:40

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='LogPosts',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_id', models.CharField(max_length=20)),
                ('object_id_post', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='LogSearch',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_id', models.CharField(max_length=20)),
                ('type_search', models.CharField(max_length=200)),
                ('real_estate_type', models.CharField(max_length=200)),
                ('province_search', models.CharField(max_length=200)),
                ('district_search', models.CharField(max_length=200)),
                ('ward_search', models.CharField(max_length=200)),
                ('price_search', models.FloatField(default=0)),
                ('squad_search', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at', null=True, verbose_name='Created at')),
                ('created_by', models.CharField(blank=True, db_column='created_by', default='', max_length=100, null=True, verbose_name='Created by')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('gender', models.CharField(max_length=20)),
                ('date_of_birth', models.DateField()),
                ('identity_num', models.CharField(max_length=15)),
                ('email', models.CharField(max_length=100)),
                ('mobile_number', models.CharField(max_length=10)),
                ('country', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=100)),
                ('province_info', models.CharField(max_length=50)),
                ('district_info', models.CharField(max_length=50)),
                ('ward_info', models.CharField(max_length=50)),
                ('token', models.CharField(blank=True, db_column='account_token', max_length=200, null=True, verbose_name='Token')),
                ('token_date', models.DateField(blank=True, db_column='account_token_date', null=True, verbose_name='Token Date')),
                ('account_token_reset_pass', models.CharField(blank=True, db_column='account_token_reset_pass', max_length=200, null=True)),
                ('account_token_reset_pass_time', models.DateTimeField(blank=True, db_column='account_token_reset_pass_time', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at', null=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='modified_at', null=True, verbose_name='Updated at')),
                ('created_by', models.CharField(blank=True, db_column='created_by', default='', max_length=100, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, db_column='modified_by', default='', max_length=100, null=True, verbose_name='Updated by')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
